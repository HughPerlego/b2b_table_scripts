WITH B2B_users AS (
SELECT analytics_reporting.user_registrations.user_id
FROM analytics_reporting.user_registrations 
INNER JOIN analytics_reporting.partner_organisations ON analytics_reporting.partner_organisations.organisation_id = analytics_reporting.user_registrations.organisation_id
LEFT JOIN analytics_reporting.user_group_codes ON analytics_reporting.user_group_codes.user_id = analytics_reporting.user_registrations.user_id),

Analytics_Events AS (
SELECT user_id, event_timestamp, event_name, book_id, event_name_raw, session_id,
CASE WHEN reference_style IS NULL AND event_name = 'book reference copied' THEN 'Unknown'
		 WHEN reference_style IS NOT NULL AND event_name = 'book reference copied' THEN reference_style
 ELSE NULL END AS reference_style 
FROM analytics_reporting.user_tracking_events 
WHERE user_id IN (SELECT user_id from B2B_users)
AND (event_name_raw IN ('font size change', 'change font size', 'book reference copied', 'find in book tab opening') or 
event_name in ('bookmark creation'))),

/* extract copied passages from the main tracking table - done as copy event seem to fire multiple times for the same event in a few cases - will account for this by grouping user_id, book_id, highlighted text for that day as should be unique for each real copy action. Grouped table will be appended to the main product table*/

Extracted_Copy_Info AS (
SELECT user_id,
       CAST(record_date as date) as event_timestamp,
       event_name,
       CASE WHEN json_extract_scalar(event_properties, '$.bookId') <> '' THEN json_extract_scalar(event_properties, '$.bookId') 
       ELSE json_extract_scalar(event_properties, '$.book_id') END AS book_id,
       json_extract_scalar(event_properties, '$.highlightedText') as highlighted_text,
       session_id
FROM prodgluegoldbuckets3database.event_tracking 
WHERE user_id IN (SELECT user_id FROM B2B_users)
AND event_name = 'copy'
AND json_extract_scalar(event_properties, '$.success') = 'true'
GROUP BY 
        1, 2, 3, 4, 5, 6)
        
/* append copy infomation to product table */

SELECT *
FROM Analytics_Events
UNION ALL
SELECT user_id, 
       event_timestamp,
       event_name, 
       CAST(book_id as INT), 
       NULL AS event_name_raw, 
       session_id, 
       NULL AS reference_style
FROM Extracted_Copy_Info


